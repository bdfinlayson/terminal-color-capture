#!/usr/bin/env ruby
require 'highline/import'
require 'sqlite3'

Dir["./app/**/*.rb"].each{|f| require f}
Dir["./lib/*.rb"].each{|f| require f}

# LSCOLORS
# The value of this variable describes what color to use for which attribute when colors
# are enabled with CLICOLOR.  This string is a concatenation of pairs of the format fb,
# where f is the foreground color and b is the background color.

# The color designators are as follows:

#    a     black
#    b     red
#    c     green
#    d     brown
#    e     blue
#    f     magenta
#    g     cyan
#    h     light grey
#    A     bold black, usually shows up as dark grey
#    B     bold red
#    C     bold green
#    D     bold brown, usually shows up as yellow
#    E     bold blue
#    F     bold magenta
#    G     bold cyan
#    H     bold light grey; looks like bright white
#    x     default foreground or background

# Note that the above are standard ANSI colors.  The actual display may differ depending
# on the color capabilities of the terminal in use.

# The order of the attributes are as follows:

#    1.   directory
#    2.   symbolic link
#    3.   socket
#    4.   pipe
#    5.   executable
#    6.   block special
#    7.   character special
#    8.   executable with setuid bit set
#    9.   executable with setgid bit set
#    10.  directory writable to others, with sticky bit
#    11.  directory writable to others, without sticky bit

# The default is "exfxcxdxbxegedabagacad", i.e. blue foreground and default background
# for regular directories, black foreground and red background for setuid executables,
# etc.

choose do |menu|
  menu.prompt = "Hello, what would you like to do?\n"
  BashFile.prepare

  menu.choice(:CreateANewColorScheme) {
    color_scheme_answer_arr = ColorSchemeQuestionsController.ask_all_new_scheme
    new_color_scheme = ColorScheme.new(color_scheme_answer_arr,false)
    #Create New Color Scheme in DB
    ColorSchemeController.new.add(new_color_scheme)
  }
  menu.choice(:ActivateExistingColorScheme) {
    say(ColorSchemeController.new.table)
    if ColorScheme.count > 0
        activate_scheme = ColorSchemeQuestionsController.ask_which_color_scheme_activate
        if !activate_scheme.empty?
            scheme = ColorScheme.get_props(activate_scheme)[0]
            ColorScheme.activate(scheme.text_color,scheme.background_color,scheme.text_format,scheme.overwrite_prompt)
            say("Color scheme activated successfully! Use `BASH_RELOAD` to apply changes\n")
        end
    end
  }
  menu.choice(:EditExistingColorScheme) {
    say(ColorSchemeController.new.table)
    if ColorScheme.count > 0
        change_val_arr = ColorSchemeQuestionsController.ask_all_change_scheme
        #Update Color Scheme in DB
        ColorScheme.update(change_val_arr[0],change_val_arr[1],change_val_arr[2])
    end
  }
  menu.choice(:DeleteExistingColorScheme) {
    say(ColorSchemeController.new.table)
    if ColorScheme.count > 0
        delete_scheme = ColorSchemeQuestionsController.ask_which_color_scheme_delete
        if !delete_scheme.empty?
            id = ColorScheme.get_id(delete_scheme)
            ColorScheme.delete(id)
            say("Color scheme deleted successfully!\n")
        end
    end
  }
  menu.choice(:CreateLSColorProfile) {
    ls_profile_answer_arr = LSColorProfileQuestionsController.ask_all_new_ls_profile
    LSColorProfileController.new.add(ls_profile_answer_arr)
    say("New ls color profile created successfully!\n")
  }
  menu.choice(:ActivateLSColorProfile) {
    #show all existng ls color profiles
    edit_profile = ask("Which profile would you like to edit?")
    if !edit_profile.empty?
        #run "CreateLSColorProfile" menu, replacing existing variables
        say("LS Color profile edited successfully!\n")
    end
  }
  menu.choice(:EditLSColorProfile) {
    #show all existng ls color profiles
    edit_profile = ask("Which profile would you like to edit?")
    if !edit_profile.empty?
        #run "CreateLSColorProfile" menu, replacing existing variables
        say("LS Color profile edited successfully!\n")
    end
  }
  menu.choice(:DeleteLSColorProfile) {
    #show all existng color schemes
    delete_profile = ask("Which profile would you like to delete?"){|q|
        q.confirm = true
    }
    if !delete_profile.empty?
        #delete given profile name
        say("LS Color profile deleted successfully!\n")
    end
  }
  menu.choice(:Exit){
    say("See ya!")
    exit
  }
end
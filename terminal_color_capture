#!/usr/bin/env ruby
require 'highline/import'
require 'sqlite3'

Dir["./app/**/*.rb"].each{|f| require f}
Dir["./lib/*.rb"].each{|f| require f}

choose do |menu|
  menu.prompt = "Hello, what would you like to do?\n"
  BashFile.prepare

  menu.choice("Create Color Scheme") {
    color_scheme_answer_arr = ColorSchemeQuestionsController.ask_all_new_scheme
    new_color_scheme = ColorScheme.new(color_scheme_answer_arr,false)
    #Create New Color Scheme in DB
    ColorSchemeController.new.add(new_color_scheme)
  }
  menu.choice("Activate Color Scheme") {
    say(ColorSchemeController.new.table)
    if ColorScheme.count > 0
        activate_scheme = ColorSchemeQuestionsController.ask_which_color_scheme_activate
        if !activate_scheme.empty?
            scheme = ColorScheme.get_props(activate_scheme)[0]
            ColorScheme.activate(scheme.text_color,scheme.background_color,scheme.text_format,scheme.overwrite_prompt)
            say("Color scheme activated successfully! Use `BASH_RELOAD` to apply changes\n")
        end
    end
  }
  menu.choice("Edit Color Scheme") {
    say(ColorSchemeController.new.table)
    if ColorScheme.count > 0
        change_val_arr = ColorSchemeQuestionsController.ask_all_change_scheme
        #Update Color Scheme in DB
        ColorScheme.update(change_val_arr[0],change_val_arr[1],change_val_arr[2])
    end
  }
  menu.choice("Delete Color Scheme") {
    say(ColorSchemeController.new.table)
    if ColorScheme.count > 0
        delete_scheme = ColorSchemeQuestionsController.ask_which_color_scheme_delete
        if !delete_scheme.empty?
            id = ColorScheme.get_id(delete_scheme)
            ColorScheme.delete(id)
            say("Color scheme deleted successfully!\n")
        end
    end
  }
  menu.choice("Create LS Color Profile") {
    ls_profile_answer_arr = LSColorProfileQuestionsController.ask_all_new_ls_profile
    LSColorProfileController.new.add(ls_profile_answer_arr)
    say("New ls color profile created successfully!\n")
  }
  menu.choice("Activate LS Color Profile") {
    say(LSColorProfileController.new.table)
    if LSColorProfile.count > 0
        activate_profile = LSColorProfileQuestionsController.ask_which_ls_color_profile_activate
        if !activate_profile.empty?
            profile = LSColorProfile.get_props(activate_profile)[0]
            LSColorProfile.activate(profile.key_string)
            say("LS Color Profile activated successfully! Use `BASH_RELOAD` to apply changes\n")
        end
    end
  }
  menu.choice("Edit LS Color Profile") {
    say(LSColorProfileController.new.table)
    if LSColorProfile.count > 0
        change_val_arr = LSColorProfileQuestionsController.ask_all_change_ls_color_profile
        #Update LS Color Profile in DB
        if change_val_arr[1] == 'name'
            LSColorProfile.update_name(change_val_arr[0],change_val_arr[2])
        else
            LSColorProfile.update_key_string(change_val_arr[0],change_val_arr[1],change_val_arr[2])
        end
    end
  }
  menu.choice("Delete LS Color Profile") {
    say(LSColorProfileController.new.table)
    if LSColorProfile.count > 0
        delete_scheme = LSColorProfileQuestionsController.ask_which_ls_color_profile_delete
        if !delete_scheme.empty?
            id = LSColorProfile.get_id(delete_scheme)
            LSColorProfile.delete(id)
            say("Color scheme deleted successfully!\n")
        end
    end
  }
  menu.choice("Exit"){
    say("See ya!")
    exit
  }
end